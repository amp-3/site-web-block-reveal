var C=Object.defineProperty;var D=(r,o,t)=>o in r?C(r,o,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[o]=t;var l=(r,o,t)=>D(r,typeof o!="symbol"?o+"":o,t);import{B as M,S as g,R as f,M as p,a as y}from"./BaseInputHandler.js";class w extends M{constructor(t){super(t);l(this,"dragState");l(this,"config");l(this,"lastThrottleTime",0);l(this,"globalMoveHandler",null);l(this,"globalUpHandler",null);this.config={dragThreshold:1,swipeMinVelocity:100,throttleInterval:8},this.dragState={isDragging:!1,startX:0,startY:0,currentX:0,currentY:0,startTime:0,lastMoveTime:0}}setupEventListeners(){this.container.eventMode="static",this.container.interactiveChildren=!1,this.container.on("pointerdown",this.handlePointerDown.bind(this)),this.container.on("pointermove",this.handlePointerMove.bind(this)),this.container.on("pointerup",this.handlePointerUp.bind(this)),this.container.on("pointercancel",this.handlePointerCancel.bind(this)),this.container.on("touchstart",this.handleTouchStart.bind(this)),this.container.on("touchmove",this.handleTouchMove.bind(this)),this.container.on("touchend",this.handleTouchEnd.bind(this)),this.container.on("touchcancel",this.handleTouchCancel.bind(this))}onEnable(){const t=this.container.children;if(t.length>0&&t[0]instanceof g){const e=t[0];this.container.hitArea=new f(0,0,e.width,e.height)}else{const e=this.container.getLocalBounds();e.width>0&&e.height>0&&(this.container.hitArea=new f(e.x,e.y,e.width,e.height))}}onDisable(){}handlePointerDown(t){if(!this.isEnabled)return;const e=this.getNormalizedCoordinates(t);this.startDrag(e.x,e.y),this.onInput(e.x,e.y)}handleTouchStart(t){if(!this.isEnabled)return;t.preventDefault();const e=this.getNormalizedCoordinates(t);this.startDrag(e.x,e.y),this.onInput(e.x,e.y)}getNormalizedCoordinates(t){const e=this.container.children;if(e.length>0&&e[0]instanceof g){const i=e[0],s=t.getLocalPosition(i);return p.normalizeCoordinate(s.x,s.y,i.width,i.height)}const n=t.getLocalPosition(this.container),a=this.container.getLocalBounds();return a.width===0||a.height===0?{x:0,y:0}:p.normalizeCoordinate(n.x,n.y,a.width,a.height)}handlePointerMove(t){if(!this.isEnabled)return;const e=this.getNormalizedCoordinates(t);this.updateDrag(e.x,e.y)}handlePointerUp(t){if(!this.isEnabled)return;const e=this.getNormalizedCoordinates(t);this.endDrag(e.x,e.y)}handlePointerCancel(t){this.isEnabled&&this.cancelDrag()}handleTouchMove(t){if(!this.isEnabled)return;t.preventDefault();const e=this.getNormalizedCoordinates(t);this.updateDrag(e.x,e.y)}handleTouchEnd(t){if(!this.isEnabled)return;t.preventDefault();const e=this.getNormalizedCoordinates(t);this.endDrag(e.x,e.y)}handleTouchCancel(t){this.isEnabled&&this.cancelDrag()}startDrag(t,e){const n=Date.now();this.dragState={isDragging:!0,startX:t,startY:e,currentX:t,currentY:e,startTime:n,lastMoveTime:n},this.addGlobalListeners()}updateDrag(t,e){const n=Date.now();n-this.lastThrottleTime<this.config.throttleInterval||(this.lastThrottleTime=n,this.dragState.currentX=t,this.dragState.currentY=e,this.dragState.lastMoveTime=n,this.dragState.isDragging&&this.onInput(t,e))}endDrag(t,e){if(this.dragState.isDragging){const n=this.detectSwipe(t,e);n&&n.velocity>this.config.swipeMinVelocity&&this.handleSwipe(n)}this.resetDrag()}cancelDrag(){this.resetDrag()}resetDrag(){this.dragState={isDragging:!1,startX:0,startY:0,currentX:0,currentY:0,startTime:0,lastMoveTime:0},this.removeGlobalListeners()}detectSwipe(t,e){const n=t-this.dragState.startX,a=e-this.dragState.startY,i=Date.now()-this.dragState.startTime;if(i===0)return null;const h=Math.sqrt(n*n+a*a)/i*1e3;let d;const c=Math.abs(n),u=Math.abs(a);return c>u*2?d="horizontal":u>c*2?d="vertical":d="diagonal",{direction:d,velocity:h,deltaX:n,deltaY:a,duration:i}}handleSwipe(t){const e=Math.max(10,Math.floor(t.velocity/100)),n=t.deltaX/e,a=t.deltaY/e;for(let i=0;i<=e;i++){const s=this.dragState.startX+n*i,h=this.dragState.startY+a*i;s>=0&&s<=1&&h>=0&&h<=1&&this.onInput(s,h)}}addGlobalListeners(){(this.globalMoveHandler||this.globalUpHandler)&&this.removeGlobalListeners(),this.globalMoveHandler=t=>{if(!this.isEnabled)return;const e=this.getGlobalNormalizedCoordinates(t);e&&this.updateDrag(e.x,e.y)},this.globalUpHandler=t=>{if(!this.isEnabled)return;const e=this.getGlobalNormalizedCoordinates(t);e?this.endDrag(e.x,e.y):this.resetDrag()},document.addEventListener("mousemove",this.globalMoveHandler),document.addEventListener("mouseup",this.globalUpHandler),document.addEventListener("touchmove",this.globalMoveHandler,{passive:!1}),document.addEventListener("touchend",this.globalUpHandler)}removeGlobalListeners(){this.globalMoveHandler&&(document.removeEventListener("mousemove",this.globalMoveHandler),document.removeEventListener("touchmove",this.globalMoveHandler),this.globalMoveHandler=null),this.globalUpHandler&&(document.removeEventListener("mouseup",this.globalUpHandler),document.removeEventListener("touchend",this.globalUpHandler),this.globalUpHandler=null)}getGlobalNormalizedCoordinates(t){try{let e=null,n=this.container;for(;n&&n.parent;)if(n=n.parent,n&&typeof n=="object"&&"renderer"in n&&n.renderer&&typeof n.renderer=="object"&&"view"in n.renderer){e=n.renderer.view;break}if(!e)return null;const a=e.getBoundingClientRect();let i,s;if(t instanceof MouseEvent)i=t.clientX,s=t.clientY;else{if(t.touches.length===0)return null;i=t.touches[0].clientX,s=t.touches[0].clientY}const h=i-a.left,d=s-a.top,c=this.container.children;if(c.length>0&&c[0]instanceof g){const u=c[0],m=this.container.getBounds(),v=(h-m.x)/this.container.scale.x,b=(d-m.y)/this.container.scale.y;return{x:Math.max(0,Math.min(1,v/u.width)),y:Math.max(0,Math.min(1,b/u.height))}}return null}catch{return null}}destroy(){this.removeGlobalListeners(),this.container.off("pointerdown",this.handlePointerDown.bind(this)),this.container.off("pointermove",this.handlePointerMove.bind(this)),this.container.off("pointerup",this.handlePointerUp.bind(this)),this.container.off("pointercancel",this.handlePointerCancel.bind(this)),this.container.off("touchstart",this.handleTouchStart.bind(this)),this.container.off("touchmove",this.handleTouchMove.bind(this)),this.container.off("touchend",this.handleTouchEnd.bind(this)),this.container.off("touchcancel",this.handleTouchCancel.bind(this)),this.container.eventMode="none"}}class S extends y{constructor(t){super(t);l(this,"inputHandler");l(this,"revealRadius");this.revealRadius=t.revealRadius??3}setupGameSpecific(){this.inputHandler=new w({container:this.getBlockReveal().getContainer(),onInput:this.handleInput.bind(this)})}onImagesLoaded(){console.log("Click game: Images loaded, enabling input handler"),this.inputHandler.enable()}handleInput(t,e){console.log("Click game controller handling input at:",t,e),this.getBlockReveal().reveal({x:t,y:e,radius:this.revealRadius})}setupAdditionalEventListeners(){}handleGameSpecificKeyDown(t){t.key==="+"||t.key==="="?(this.revealRadius=Math.min(10,this.revealRadius+1),console.log("Reveal radius increased to:",this.revealRadius)):(t.key==="-"||t.key==="_")&&(this.revealRadius=Math.max(1,this.revealRadius-1),console.log("Reveal radius decreased to:",this.revealRadius))}onReset(){console.log("Click game reset")}destroyGameSpecific(){this.inputHandler&&this.inputHandler.destroy()}}window.gameController=null;document.addEventListener("DOMContentLoaded",()=>{const r=new S({containerId:"game-container",backgroundImage:"./assets/images/background.png",foregroundImage:"./assets/images/foreground.png",blockSize:8,gravity:1e3,explosionForce:300,fadeOutDuration:500,revealRadius:3});window.gameController=r;const o=document.getElementById("reset-button");o&&o.addEventListener("click",()=>{r.reset()})});
